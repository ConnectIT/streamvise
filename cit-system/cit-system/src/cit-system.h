
#ifndef _H_cit_system
#define _H_cit_system
/* 
 * Copyright (c) 2013, Chris Mavrakis, All Rights Reserved.
 * Full license can be found in LICENSE file.

*** Generated by yangdump 2.2.1731

    Combined SIL header
    module cit-system
    revision 2012-04-11
    namespace http://netconfcentral.org/ns/cit-system
    organization ConnectIT

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_cit_system_M_cit_system (const xmlChar *)"cit-system"
#define y_cit_system_R_cit_system (const xmlChar *)"2012-04-11"

#define y_cit_system_N_get_live_conn (const xmlChar *)"get-live-conn"
#define y_cit_system_N_live_conn (const xmlChar *)"live-conn"
#define y_cit_system_N_system_reboot (const xmlChar *)"system-reboot"

/* container /system-reboot/input */
typedef struct y_cit_system_T_system_reboot_input_ {
} y_cit_system_T_system_reboot_input;

/* container /system-reboot/output */
typedef struct y_cit_system_T_system_reboot_output_ {
} y_cit_system_T_system_reboot_output;

/* rpc /system-reboot */
typedef struct y_cit_system_T_system_reboot_ {
    y_cit_system_T_system_reboot_input input;
    y_cit_system_T_system_reboot_output output;
} y_cit_system_T_system_reboot;

/* container /get-live-conn/input */
typedef struct y_cit_system_T_get_live_conn_input_ {
} y_cit_system_T_get_live_conn_input;

/* container /get-live-conn/output */
typedef struct y_cit_system_T_get_live_conn_output_ {
} y_cit_system_T_get_live_conn_output;

/* rpc /get-live-conn */
typedef struct y_cit_system_T_get_live_conn_ {
    y_cit_system_T_get_live_conn_input input;
    y_cit_system_T_get_live_conn_output output;
} y_cit_system_T_get_live_conn;

/* notification /live-conn */
typedef struct y_cit_system_T_live_conn_ {
    xmlChar *live_conn;
} y_cit_system_T_live_conn;

/********************************************************************
* FUNCTION y_cit_system_live_conn_send
* 
* Send a y_cit_system_live_conn notification
* Called by your code when notification event occurs
* 
********************************************************************/
extern void y_cit_system_live_conn_send (
    const xmlChar *live_conn);

/********************************************************************
* FUNCTION y_cit_system_init
* 
* initialize the cit-system server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_cit_system_init (
    const xmlChar *modname,
    const xmlChar *revision);

/********************************************************************
* FUNCTION y_cit_system_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_cit_system_init2 (void);

/********************************************************************
* FUNCTION y_cit_system_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_cit_system_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
