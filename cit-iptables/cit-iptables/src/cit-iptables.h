
#ifndef _H_cit_iptables
#define _H_cit_iptables
/* 
 * Copyright (c) 2013, Chris Mavrakis, All Rights Reserved.
 * Full license can be found in LICENSE file.

*** Generated by yangdump 2.2.1721

    Combined SIL header
    module cit-iptables
    revision 2012-01-12
    namespace http://netconfcentral.org/ns/cit-iptables
    organization ConnectIT

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_cit_iptables_M_cit_iptables (const xmlChar *)"cit-iptables"
#define y_cit_iptables_R_cit_iptables (const xmlChar *)"2012-01-12"

#define y_cit_iptables_N_appendto (const xmlChar *)"appendto"
#define y_cit_iptables_N_connmark_options (const xmlChar *)"connmark-options"
#define y_cit_iptables_N_dest_ip (const xmlChar *)"dest-ip"
#define y_cit_iptables_N_destination_port (const xmlChar *)"destination-port"
#define y_cit_iptables_N_dnat_options (const xmlChar *)"dnat-options"
#define y_cit_iptables_N_entryno (const xmlChar *)"entryno"
#define y_cit_iptables_N_input_interface (const xmlChar *)"input-interface"
#define y_cit_iptables_N_interface (const xmlChar *)"interface"
#define y_cit_iptables_N_ip (const xmlChar *)"ip"
#define y_cit_iptables_N_ip_end (const xmlChar *)"ip-end"
#define y_cit_iptables_N_iptables (const xmlChar *)"iptables"
#define y_cit_iptables_N_jump (const xmlChar *)"jump"
#define y_cit_iptables_N_mark (const xmlChar *)"mark"
#define y_cit_iptables_N_mark_options (const xmlChar *)"mark-options"
#define y_cit_iptables_N_module (const xmlChar *)"module"
#define y_cit_iptables_N_not (const xmlChar *)"not"
#define y_cit_iptables_N_output_interface (const xmlChar *)"output-interface"
#define y_cit_iptables_N_port (const xmlChar *)"port"
#define y_cit_iptables_N_port_end (const xmlChar *)"port-end"
#define y_cit_iptables_N_port_start (const xmlChar *)"port-start"
#define y_cit_iptables_N_protocol (const xmlChar *)"protocol"
#define y_cit_iptables_N_rule (const xmlChar *)"rule"
#define y_cit_iptables_N_set_mark_option (const xmlChar *)"set-mark-option"
#define y_cit_iptables_N_snat_options (const xmlChar *)"snat-options"
#define y_cit_iptables_N_source_ip (const xmlChar *)"source-ip"
#define y_cit_iptables_N_source_port (const xmlChar *)"source-port"
#define y_cit_iptables_N_state (const xmlChar *)"state"
#define y_cit_iptables_N_state_options (const xmlChar *)"state-options"
#define y_cit_iptables_N_table (const xmlChar *)"table"

/* container /iptables/rule/table */
typedef struct y_cit_iptables_T_iptables_rule_table_ {
    xmlChar *table;
} y_cit_iptables_T_iptables_rule_table;

/* container /iptables/rule/appendto */
typedef struct y_cit_iptables_T_iptables_rule_appendto_ {
    xmlChar *appendto;
} y_cit_iptables_T_iptables_rule_appendto;

/* container /iptables/rule/protocol */
typedef struct y_cit_iptables_T_iptables_rule_protocol_ {
    xmlChar *protocol;
    boolean not;
} y_cit_iptables_T_iptables_rule_protocol;

/* container /iptables/rule/source-ip */
typedef struct y_cit_iptables_T_iptables_rule_source_ip_ {
    xmlChar *ip;
    boolean not;
} y_cit_iptables_T_iptables_rule_source_ip;

/* container /iptables/rule/dest-ip */
typedef struct y_cit_iptables_T_iptables_rule_dest_ip_ {
    xmlChar *ip;
    boolean not;
} y_cit_iptables_T_iptables_rule_dest_ip;

/* container /iptables/rule/input-interface */
typedef struct y_cit_iptables_T_iptables_rule_input_interface_ {
    xmlChar *interface;
    boolean not;
} y_cit_iptables_T_iptables_rule_input_interface;

/* container /iptables/rule/output-interface */
typedef struct y_cit_iptables_T_iptables_rule_output_interface_ {
    xmlChar *interface;
    boolean not;
} y_cit_iptables_T_iptables_rule_output_interface;

/* container /iptables/rule/module */
typedef struct y_cit_iptables_T_iptables_rule_module_ {
    xmlChar *module;
} y_cit_iptables_T_iptables_rule_module;

/* container /iptables/rule/mark-options */
typedef struct y_cit_iptables_T_iptables_rule_mark_options_ {
    uint32 mark;
    boolean not;
} y_cit_iptables_T_iptables_rule_mark_options;

/* container /iptables/rule/connmark-options */
typedef struct y_cit_iptables_T_iptables_rule_connmark_options_ {
    xmlChar *connmark_options;
} y_cit_iptables_T_iptables_rule_connmark_options;

/* container /iptables/rule/state-options */
typedef struct y_cit_iptables_T_iptables_rule_state_options_ {
    xmlChar *state;
    boolean not;
} y_cit_iptables_T_iptables_rule_state_options;

/* container /iptables/rule/source-port */
typedef struct y_cit_iptables_T_iptables_rule_source_port_ {
    uint32 port;
    boolean not;
} y_cit_iptables_T_iptables_rule_source_port;

/* container /iptables/rule/destination-port */
typedef struct y_cit_iptables_T_iptables_rule_destination_port_ {
    uint32 port;
    boolean not;
} y_cit_iptables_T_iptables_rule_destination_port;

/* container /iptables/rule/jump */
typedef struct y_cit_iptables_T_iptables_rule_jump_ {
    xmlChar *jump;
} y_cit_iptables_T_iptables_rule_jump;

/* container /iptables/rule/snat-options */
typedef struct y_cit_iptables_T_iptables_rule_snat_options_ {
    val_value_t *ip;
    val_value_t *ip_end;
    uint32 port_start;
    uint32 port_end;
} y_cit_iptables_T_iptables_rule_snat_options;

/* container /iptables/rule/dnat-options */
typedef struct y_cit_iptables_T_iptables_rule_dnat_options_ {
    val_value_t *ip;
    val_value_t *ip_end;
    uint32 port_start;
    uint32 port_end;
} y_cit_iptables_T_iptables_rule_dnat_options;

/* list /iptables/rule */
typedef struct y_cit_iptables_T_iptables_rule_ {
    dlq_hdr_t qhdr;
    uint32 entryno;
    y_cit_iptables_T_iptables_rule_table table;
    y_cit_iptables_T_iptables_rule_appendto appendto;
    y_cit_iptables_T_iptables_rule_protocol protocol;
    y_cit_iptables_T_iptables_rule_source_ip source_ip;
    y_cit_iptables_T_iptables_rule_dest_ip dest_ip;
    y_cit_iptables_T_iptables_rule_input_interface input_interface;
    y_cit_iptables_T_iptables_rule_output_interface output_interface;
    y_cit_iptables_T_iptables_rule_module module;
    y_cit_iptables_T_iptables_rule_mark_options mark_options;
    y_cit_iptables_T_iptables_rule_connmark_options connmark_options;
    y_cit_iptables_T_iptables_rule_state_options state_options;
    y_cit_iptables_T_iptables_rule_source_port source_port;
    y_cit_iptables_T_iptables_rule_destination_port destination_port;
    y_cit_iptables_T_iptables_rule_jump jump;
    uint32 set_mark_option;
    y_cit_iptables_T_iptables_rule_snat_options snat_options;
    y_cit_iptables_T_iptables_rule_dnat_options dnat_options;
} y_cit_iptables_T_iptables_rule;

/* container /iptables */
typedef struct y_cit_iptables_T_iptables_ {
    dlq_hdr_t rule;
} y_cit_iptables_T_iptables;

/********************************************************************
* FUNCTION y_cit_iptables_init
* 
* initialize the cit-iptables server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_cit_iptables_init (
    const xmlChar *modname,
    const xmlChar *revision);


/********************************************************************
* FUNCTION y_cit_iptables_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_cit_iptables_init2 (void);


/********************************************************************
* FUNCTION y_cit_iptables_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_cit_iptables_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif
